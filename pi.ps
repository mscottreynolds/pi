pseudocode pi

/**
This program computes Pi by the formula:
pi / 4 = 4 * ArcTan(1/5) - ArcTan(1/239)

Adapted from some program I found on the Internet a long time
ago that computed Pi by:
pi / 4 = ArcTan(1/2) + ArcTan(1/3)

I have no idea who wrote the original program nor remember where
I found it--there wasn't any credits in the original C source.  This
one also no longer looks like the original as I've completely rewritten
it.  I got a lot of my information from http://www.boo.net/~jasonp/pipage.html
(Archived version at https://web.archive.org/web/20160605054240/http://www.boo.net/~jasonp/pipage.html)
when I rewrote the program.  

This program will reliably compute up to
1,000,000 digits, that I've verified.

There are faster ways of computing Pi, and this program probably
could be optimized further, but it is sufficiently fast for computing
Pi using relatively portable and understandable routines that can
be easily converted into other languages.

Computing Pi using FFTs are much much faster, but also much more
complicated.  Using the ArcTan methods are fairly simple to implement,
but not nearly as fast as the FFT methods.  Also, the
pi / 4 = 4 * ArcTan(1/5) - ArcTan(1/239) formula is one of the faster
of the various ArcTan formulas for computing PI.

Author: M. Scott Reynolds
Date: 17 August 2018
*/

import stdio.print

/**
* Compute pi up to maxDigits long.
* Return result as a string. 
*/
function computePi(maxDigits: number): string
begin
    const SIZE = 1000

    var precision: number
    var remainder1: number, remainder2: number, remainder3: number, remainder4: number
    var b: number, n: number, n2: number, carry: number
    var i: number, l: number
    var isZero: boolean
    var p: number[], t: number[]
    var text: string

    // Initialize.
    // Have to actually compute a few more digits in order to reach the requested
    // digits of pi.
    precision := maxDigits div 3 + 2
    setlength(p, precision+1)
    setlength(t, precision+1)
    for i := 0 to precision do
        p[i] := 0
        t[i] := 0
    end

    // Note, borrows and carries from the addition and subtraction
    // are postponed till last.  See: http://www.boo.net/~jasonp/ord

    // Compute arctan(1/5)

    // t = t / 5, p = t
    t[0] := 1
    remainder1 := 0
    for i := 0 to precision do
        b := SIZE * remainder1 + t[i]
        t[i] := b div 5
        p[i] := t[i]
        remainder1 := b mod 5
    end

    // While t is not zero.
    n := -1
    n2 := 1
    repeat
        // t = t / 25, p = p - t / n, t = t / 25, p = p + t / (n+2)
        remainder1 := 0
        remainder2 := 0
        remainder3 := 0
        remainder4 := 0
        isZero := true
        n += 4
        n2 += 4
        for i := 0 to precision do
            b := SIZE * remainder1 + t[i]
            t[i] := b div 25
            remainder1 := b mod 25

            b := SIZE * remainder2 + t[i]
            p[i] -= b div n
            remainder2 := b mod n

            b := SIZE * remainder3 + t[i]
            t[i] := b div 25
            remainder3 := b mod 25

            b := SIZE * remainder4 + t[i]
            p[i] += b div n2
            remainder4 := b mod n2

            if isZero and t[i] != 0 then
                isZero := false
            end
        end
    until isZero

    // p = p * 4
    carry := 0
    for i := precision to 0 by -1 do
        b := p[i] * 4 + carry
        p[i] := b mod SIZE
        carry := b div SIZE
    end

    // Compute arctan(1/239)

    // t = t / 239, p = p - t
    t[0] := 1
    remainder1 := 0
    for i := 0 to precision do
        b := SIZE * remainder1 + t[i]
        t[i] := b div 239
        p[i] -= t[i]
        remainder1 := b mod 239
    end

    // While t is not zero.
    n := -1
    n2 := 1
    repeat
        // t = t / 57121, p = p + t / n, t = t / 57121, p = p - t / (n+2)
        remainder1 := 0
        remainder2 := 0
        remainder3 := 0
        remainder4 := 0
        isZero := true
        n += 4
        n2 += 4
        for i := 0 to precision do
            b := SIZE * remainder1 + t[i]
            t[i] := b div 57121
            remainder1 := b mod 57121

            b := SIZE * remainder2 + t[i]
            p[i] += b div n
            remainder2 := b mod n

            b := SIZE * remainder3 + t[i]
            t[i] := b div 57121
            remainder3 := b mod 57121

            b := SIZE * remainder4 + t[i]
            p[i] -= b div n2
            remainder4 := b mod n2

            if isZero and t[i] != 0 then    // is t zero?
                isZero := false
            end
        end
    until isZero

    // p = p * 4
    carry := 0
    for i := precision to 0 by -1 do
        b := p[i] * 4 + carry
        p[i] := b mod SIZE
        carry := b div SIZE
    end

    // Borrow and carry.
    for i := precision to 1 by -1 do
        if p[i] < 0 then
            b := p[i] div SIZE
            p[i] -= (b - 1) * SIZE
            p[i-1] += b - 1
        end
        if p[i] >= SIZE then
            b := p[i] div SIZE
            p[i] -= b * SIZE
            p[i-1] += b
        end
    end

    // Return results as a string.
    text := string(p[0]) + "."
    for i := 1 to precision-1 do
        if p[i] < 10 then
            text += "00"
        elsif p[i] < 100 then
            text += "0"
        end
        text += string(p[i])
    end

    // Truncate length to the actual specified digits.
    setlength(text, maxDigits+2)
    return text
end
    
begin
    var s: string
    
    s := computePi(10000)
    print(s)
end
